version: '3.8'

services:
  # Service E (Terminal Service - Statistics)
  xmlrpc-service-e:
    build:
      context: ..
      dockerfile: docker/Dockerfile.xmlrpc.service_e
    container_name: xmlrpc-service-e
    ports:
      - "8005:8005"
    networks:
      - xmlrpc-network
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_E_HOST=0.0.0.0
      - SERVICE_E_PORT=8005
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import xmlrpc.client; xmlrpc.client.ServerProxy(\"http://localhost:8005\", allow_none=True).system.listMethods()' || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 10
      start_period: 5s

  # Service D (MergeSort Grade)
  xmlrpc-service-d:
    build:
      context: ..
      dockerfile: docker/Dockerfile.xmlrpc.service_d
    container_name: xmlrpc-service-d
    ports:
      - "8004:8004"
    networks:
      - xmlrpc-network
    depends_on:
      xmlrpc-service-e:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_D_HOST=0.0.0.0
      - SERVICE_D_PORT=8004
      - SERVICE_E_URL=http://xmlrpc-service-e:8005
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import xmlrpc.client; xmlrpc.client.ServerProxy(\"http://localhost:8004\", allow_none=True).system.listMethods()' || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 10
      start_period: 5s

  # Service C (MergeSort CGPA)
  xmlrpc-service-c:
    build:
      context: ..
      dockerfile: docker/Dockerfile.xmlrpc.service_c
    container_name: xmlrpc-service-c
    ports:
      - "8003:8003"
    networks:
      - xmlrpc-network
    depends_on:
      xmlrpc-service-d:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_C_HOST=0.0.0.0
      - SERVICE_C_PORT=8003
      - SERVICE_D_URL=http://xmlrpc-service-d:8004
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import xmlrpc.client; xmlrpc.client.ServerProxy(\"http://localhost:8003\", allow_none=True).system.listMethods()' || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 10
      start_period: 5s

  # Service B (MapReduce Grade Count)
  xmlrpc-service-b:
    build:
      context: ..
      dockerfile: docker/Dockerfile.xmlrpc.service_b
    container_name: xmlrpc-service-b
    ports:
      - "8002:8002"
    networks:
      - xmlrpc-network
    depends_on:
      xmlrpc-service-c:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_B_HOST=0.0.0.0
      - SERVICE_B_PORT=8002
      - SERVICE_C_URL=http://xmlrpc-service-c:8003
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import xmlrpc.client; xmlrpc.client.ServerProxy(\"http://localhost:8002\", allow_none=True).system.listMethods()' || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 10
      start_period: 5s

  # Service A (MapReduce CGPA Count - Entry Point)
  xmlrpc-service-a:
    build:
      context: ..
      dockerfile: docker/Dockerfile.xmlrpc.service_a
    container_name: xmlrpc-service-a
    ports:
      - "8001:8001"
    networks:
      - xmlrpc-network
    depends_on:
      xmlrpc-service-b:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_A_HOST=0.0.0.0
      - SERVICE_A_PORT=8001
      - SERVICE_B_URL=http://xmlrpc-service-b:8002
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import xmlrpc.client; xmlrpc.client.ServerProxy(\"http://localhost:8001\", allow_none=True).system.listMethods()' || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 10
      start_period: 5s

  # Client (calls Service A)
  xmlrpc-client:
    build:
      context: ..
      dockerfile: docker/Dockerfile.xmlrpc.client
    container_name: xmlrpc-client
    depends_on:
      xmlrpc-service-a:
        condition: service_healthy
    networks:
      - xmlrpc-network
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_A_URL=http://xmlrpc-service-a:8001
      - CSV_PATH=/app/data/students.csv
      - OUTPUT_FILE=/app/results/xmlrpc_docker_performance_metrics.json
    volumes:
      - ../results:/app/results
    command: ["python", "client.py"]

networks:
  xmlrpc-network:
    driver: bridge
