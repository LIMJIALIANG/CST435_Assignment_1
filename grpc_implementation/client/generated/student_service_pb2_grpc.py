# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import student_service_pb2 as student__service__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in student_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StudentAnalysisServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PerformMapReduce = channel.unary_unary(
                '/student_service.StudentAnalysisService/PerformMapReduce',
                request_serializer=student__service__pb2.MapReduceRequest.SerializeToString,
                response_deserializer=student__service__pb2.MapReduceResponse.FromString,
                _registered_method=True)
        self.PerformMergeSort = channel.unary_unary(
                '/student_service.StudentAnalysisService/PerformMergeSort',
                request_serializer=student__service__pb2.MergeSortRequest.SerializeToString,
                response_deserializer=student__service__pb2.MergeSortResponse.FromString,
                _registered_method=True)
        self.PerformStatisticalAnalysis = channel.unary_unary(
                '/student_service.StudentAnalysisService/PerformStatisticalAnalysis',
                request_serializer=student__service__pb2.StatsRequest.SerializeToString,
                response_deserializer=student__service__pb2.StatsResponse.FromString,
                _registered_method=True)
        self.ProcessChain = channel.unary_unary(
                '/student_service.StudentAnalysisService/ProcessChain',
                request_serializer=student__service__pb2.ChainRequest.SerializeToString,
                response_deserializer=student__service__pb2.CombinedResponse.FromString,
                _registered_method=True)


class StudentAnalysisServiceServicer(object):
    """Service definition
    """

    def PerformMapReduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformMergeSort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformStatisticalAnalysis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessChain(self, request, context):
        """New method for service chaining
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StudentAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PerformMapReduce': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformMapReduce,
                    request_deserializer=student__service__pb2.MapReduceRequest.FromString,
                    response_serializer=student__service__pb2.MapReduceResponse.SerializeToString,
            ),
            'PerformMergeSort': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformMergeSort,
                    request_deserializer=student__service__pb2.MergeSortRequest.FromString,
                    response_serializer=student__service__pb2.MergeSortResponse.SerializeToString,
            ),
            'PerformStatisticalAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformStatisticalAnalysis,
                    request_deserializer=student__service__pb2.StatsRequest.FromString,
                    response_serializer=student__service__pb2.StatsResponse.SerializeToString,
            ),
            'ProcessChain': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessChain,
                    request_deserializer=student__service__pb2.ChainRequest.FromString,
                    response_serializer=student__service__pb2.CombinedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'student_service.StudentAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('student_service.StudentAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StudentAnalysisService(object):
    """Service definition
    """

    @staticmethod
    def PerformMapReduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/student_service.StudentAnalysisService/PerformMapReduce',
            student__service__pb2.MapReduceRequest.SerializeToString,
            student__service__pb2.MapReduceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformMergeSort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/student_service.StudentAnalysisService/PerformMergeSort',
            student__service__pb2.MergeSortRequest.SerializeToString,
            student__service__pb2.MergeSortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformStatisticalAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/student_service.StudentAnalysisService/PerformStatisticalAnalysis',
            student__service__pb2.StatsRequest.SerializeToString,
            student__service__pb2.StatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/student_service.StudentAnalysisService/ProcessChain',
            student__service__pb2.ChainRequest.SerializeToString,
            student__service__pb2.CombinedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
