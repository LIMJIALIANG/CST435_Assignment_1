syntax = "proto3";

package student_service;

// Student data structure
message Student {
    string student_id = 1;
    string name = 2;
    string faculty = 3;
    double cgpa = 4;
    string grade = 5;
}

// MapReduce Request/Response
message MapReduceRequest {
    repeated Student students = 1;
    string operation = 2;  // "cgpa_count" or "grade_count"
}

message CGPARange {
    string range = 1;  // e.g., "3.5-4.0"
    int32 count = 2;
}

message GradeCount {
    string grade = 1;
    int32 count = 2;
}

message MapReduceResponse {
    repeated CGPARange cgpa_ranges = 1;
    repeated GradeCount grade_counts = 2;
    double processing_time = 3;
}

// Merge Sort Request/Response
message MergeSortRequest {
    repeated Student students = 1;
    string sort_by = 2;  // "cgpa" or "grade"
}

message MergeSortResponse {
    repeated Student sorted_students = 1;
    double processing_time = 2;
}

// Statistical Analysis Request/Response
message StatsRequest {
    repeated Student students = 1;
    string analysis_type = 2;  // "avg_cgpa_faculty", "grade_distribution", "pass_rate"
}

message FacultyStats {
    string faculty = 1;
    double average_cgpa = 2;
    int32 student_count = 3;
}

message GradeDistribution {
    string grade = 1;
    int32 count = 2;
    double percentage = 3;
}

message StatsResponse {
    repeated FacultyStats faculty_stats = 1;
    repeated GradeDistribution grade_distribution = 2;
    double pass_rate = 3;
    double processing_time = 4;
}

// Combined Response for Service Chaining (aggregates all results)
message CombinedResponse {
    // MapReduce service results (CGPA + Grade classification)
    repeated CGPARange cgpa_ranges = 1;
    repeated GradeCount grade_counts = 3;
    double mapreduce_time = 2;
    
    // MergeSort service results (CGPA + Grade sorting)
    repeated Student sorted_by_cgpa = 5;
    repeated Student sorted_by_grade = 7;
    double mergesort_time = 6;
    
    // Statistics service results (Statistical analysis)
    repeated FacultyStats faculty_stats = 9;
    repeated GradeDistribution grade_distribution = 10;
    double pass_rate = 11;
    double statistics_time = 12;
    
    // Total workflow time
    double total_workflow_time = 13;
}

// Service Chaining Request (includes partial results from previous services)
message ChainRequest {
    repeated Student students = 1;
    CombinedResponse partial_results = 2;  // Results accumulated so far
}

// Service definition
service StudentAnalysisService {
    rpc PerformMapReduce(MapReduceRequest) returns (MapReduceResponse);
    rpc PerformMergeSort(MergeSortRequest) returns (MergeSortResponse);
    rpc PerformStatisticalAnalysis(StatsRequest) returns (StatsResponse);
    rpc ProcessChain(ChainRequest) returns (CombinedResponse);  // New method for service chaining
}
