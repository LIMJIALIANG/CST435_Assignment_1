syntax = "proto3";

package mapreduce;

// MapReduce service definition
service MapReduceService {
    // Service 1: Word Count (Map-Reduce)
    rpc Map(MapRequest) returns (MapResponse);
    rpc Reduce(ReduceRequest) returns (ReduceResponse);
    
    // Service 2: Alphabetical Word Sorting
    rpc SortWords(SortWordsRequest) returns (SortWordsResponse);
    
    // Service 3: Word Length Analysis
    rpc AnalyzeWordLengths(WordLengthRequest) returns (WordLengthResponse);
    
    // Health check
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Map request containing text chunk
message MapRequest {
    string text_chunk = 1;
    int32 chunk_id = 2;
}

// Map response with word counts
message MapResponse {
    map<string, int32> word_counts = 1;
    int32 chunk_id = 2;
    double processing_time = 3;
}

// Reduce request with intermediate results
message ReduceRequest {
    map<string, int32> intermediate_counts = 1;
}

// Reduce response with final counts
message ReduceResponse {
    map<string, int32> final_counts = 1;
    double processing_time = 2;
}

// Health check messages
message HealthCheckRequest {
    string service_name = 1;
}

message HealthCheckResponse {
    bool status = 1;
    string message = 2;
}

// Service 2: Alphabetical Word Sorting messages
message SortWordsRequest {
    string text_chunk = 1;
    int32 chunk_id = 2;
}

message SortWordsResponse {
    repeated string sorted_words = 1;
    int32 chunk_id = 2;
    int32 word_count = 3;
    double processing_time = 4;
}

// Service 3: Word Length Analysis messages
message WordLengthRequest {
    string text_chunk = 1;
    int32 chunk_id = 2;
}

message WordLengthResponse {
    map<int32, int32> length_distribution = 1;  // length -> count
    double average_length = 2;
    int32 min_length = 3;
    int32 max_length = 4;
    int32 chunk_id = 5;
    double processing_time = 6;
}
